# -*- coding: utf-8 -*-
import unittest
import numpy as np

from . import solve


class TestSolver(unittest.TestCase):
    _FIELDS = [
        [
            [7, 0, 0, 3, 0, 0, 2, 0, 6],
            [0, 0, 2, 0, 5, 8, 0, 0, 0],
            [8, 3, 0, 0, 0, 7, 0, 4, 9],
            [3, 9, 0, 0, 0, 0, 8, 5, 4],
            [0, 0, 0, 7, 0, 3, 0, 0, 0],
            [1, 2, 8, 0, 0, 0, 0, 6, 7],
            [6, 8, 0, 5, 0, 0, 0, 2, 3],
            [0, 0, 0, 8, 9, 0, 4, 0, 0],
            [4, 0, 5, 0, 0, 1, 0, 0, 8],
        ],

        [
            [6, 3, 4, 0, 1, 5, 0, 0, 0],
            [0, 0, 0, 6, 4, 0, 5, 0, 9],
            [5, 0, 1, 2, 7, 8, 0, 0, 3],
            [4, 0, 7, 3, 0, 9, 0, 8, 1],
            [9, 8, 0, 4, 2, 1, 0, 5, 7],
            [3, 0, 2, 8, 0, 7, 4, 9, 6],
            [0, 2, 5, 0, 8, 0, 9, 0, 0],
            [8, 6, 3, 0, 9, 0, 1, 7, 2],
            [0, 4, 0, 0, 3, 2, 0, 6, 0],
        ],

        [
            [0, 3, 4, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 6, 0, 0, 5, 0, 9],
            [5, 0, 1, 0, 7, 0, 0, 0, 3],
            [4, 0, 7, 0, 0, 0, 0, 8, 1],
            [9, 0, 0, 0, 2, 0, 0, 5, 7],
            [3, 0, 2, 8, 0, 7, 0, 9, 6],
            [0, 2, 5, 0, 8, 0, 0, 0, 0],
            [8, 6, 3, 0, 9, 0, 1, 0, 2],
            [0, 4, 0, 0, 3, 0, 0, 6, 0],
        ],

        [
            [0, 6, 7, 8, 0, 0, 5, 4, 0],
            [2, 0, 0, 0, 3, 0, 0, 0, 7],
            [0, 4, 9, 0, 7, 0, 8, 0, 0],
            [0, 3, 0, 0, 0, 7, 9, 8, 4],
            [0, 0, 0, 2, 0, 5, 0, 0, 0],
            [7, 8, 6, 4, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 5, 0, 4, 2, 0],
            [8, 0, 0, 0, 4, 0, 0, 0, 3],
            [0, 9, 3, 0, 0, 2, 1, 5, 0],
        ],

        [
            [0, 4, 8, 3, 0, 6, 0, 5, 0],
            [0, 0, 9, 0, 2, 0, 6, 0, 8],
            [0, 0, 2, 0, 1, 0, 0, 0, 7],
            [2, 0, 6, 0, 3, 0, 0, 0, 5],
            [0, 0, 3, 0, 0, 9, 8, 0, 0],
            [8, 0, 0, 0, 7, 4, 9, 0, 2],
            [5, 0, 0, 0, 8, 0, 7, 0, 0],
            [9, 0, 4, 0, 6, 0, 5, 0, 0],
            [0, 8, 0, 5, 0, 2, 1, 6, 0],
        ],

        [
            [4, 0, 0, 2, 0, 0, 0, 3, 0],
            [0, 0, 0, 0, 0, 3, 0, 0, 4],
            [0, 6, 0, 7, 0, 0, 0, 0, 9],
            [0, 0, 1, 8, 5, 0, 6, 0, 0],
            [0, 0, 5, 4, 0, 0, 2, 0, 0],
            [0, 0, 7, 0, 1, 0, 3, 0, 0],
            [1, 0, 0, 0, 0, 9, 0, 5, 0],
            [3, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 7, 0, 0, 0, 4, 0, 0, 3],
        ],

        [
            [0, 0, 0, 0, 0, 7, 5, 0, 0],
            [7, 0, 0, 1, 0, 0, 0, 4, 0],
            [5, 0, 0, 0, 0, 0, 2, 0, 0],
            [0, 0, 1, 3, 9, 0, 0, 0, 8],
            [3, 0, 0, 7, 8, 6, 0, 0, 4],
            [8, 0, 0, 0, 4, 1, 7, 0, 0],
            [0, 0, 8, 0, 0, 0, 0, 0, 9],
            [0, 5, 0, 0, 0, 3, 0, 0, 1],
            [0, 0, 4, 6, 0, 0, 0, 0, 0],
        ],

        [
            [8, 0, 0, 0, 1, 0, 0, 0, 9],
            [0, 5, 0, 8, 0, 7, 0, 1, 0],
            [0, 0, 4, 0, 9, 0, 7, 0, 0],
            [0, 6, 0, 7, 0, 1, 0, 2, 0],
            [5, 0, 8, 0, 6, 0, 1, 0, 7],
            [0, 1, 0, 5, 0, 2, 0, 9, 0],
            [0, 0, 7, 0, 4, 0, 6, 0, 0],
            [0, 8, 0, 3, 0, 9, 0, 4, 0],
            [3, 0, 0, 0, 5, 0, 0, 0, 8],
        ],

        [
            [0, 0, 0, 6, 0, 4, 7, 0, 0],
            [7, 0, 6, 0, 0, 0, 0, 0, 9],
            [0, 0, 0, 0, 0, 5, 0, 8, 0],
            [0, 7, 0, 0, 2, 0, 0, 9, 3],
            [8, 0, 0, 0, 0, 0, 0, 0, 5],
            [4, 3, 0, 0, 1, 0, 0, 7, 0],
            [0, 5, 0, 2, 0, 0, 0, 0, 0],
            [3, 0, 0, 0, 0, 0, 2, 0, 8],
            [0, 0, 2, 3, 0, 1, 0, 0, 0]
        ],

        [
            [0, 3, 9, 1, 0, 0, 0, 0, 0],
            [4, 0, 8, 0, 6, 0, 0, 0, 2],
            [2, 0, 0, 5, 8, 0, 7, 0, 0],
            [8, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 2, 0, 0, 0, 9, 0, 0, 0],
            [3, 0, 6, 0, 0, 0, 0, 4, 9],
            [0, 0, 0, 0, 1, 0, 0, 3, 0],
            [0, 4, 0, 3, 0, 0, 0, 0, 8],
            [7, 0, 0, 0, 0, 0, 4, 0, 0]
        ]
    ]

    def test_solvable(self):
        for f in self._FIELDS:
            with self.subTest(f=f):
                array = np.array(f)
                solution = solve(array)
                self._check_solution(solution)

    def _check_solution(self, solution: np.array):
        expected = set(range(1, 10))
        for i_row in range(9):
            self.assertSetEqual(set(solution[i_row, :]), expected)
        for i_col in range(9):
            self.assertSetEqual(set(solution[:, i_col]), expected)

        for box_row in range(3):
            for box_col in range(3):
                actual = set(solution[box_row * 3:(box_row + 1) * 3, box_col * 3:(box_col + 1) * 3].reshape(-1))
                self.assertSetEqual(actual, expected)
